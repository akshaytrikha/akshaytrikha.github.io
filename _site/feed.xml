<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-01T21:18:43-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Akshay Trikha</title><subtitle></subtitle><entry><title type="html">Transfer Learning in Computer Vision</title><link href="http://localhost:4000/deep-learning/2023/07/04/transfer-learning.html" rel="alternate" type="text/html" title="Transfer Learning in Computer Vision" /><published>2023-07-04T09:06:17-07:00</published><updated>2023-07-04T09:06:17-07:00</updated><id>http://localhost:4000/deep-learning/2023/07/04/transfer-learning</id><content type="html" xml:base="http://localhost:4000/deep-learning/2023/07/04/transfer-learning.html"><![CDATA[<p>Recall when beginning to train a neural network its weights might be initialized randomly. What if you could start training with a leg up because the network already has some useful information inside of it? Transfer learning <em>is</em> that leg up where you can repurpose models trained on similar tasks and use them for your specific task instead of training from scratch.</p>

<p>Benefits include:</p>
<ul>
  <li>training faster</li>
  <li>less training data</li>
  <li>boosts generalization</li>
  <li>might improve accuracy</li>
</ul>

<figure>
    <br />
    <img src="http://localhost:4000/assets/transfer-learning.png" alt="transfer learning diagram" />
    <figcaption style="text-align: center">diagram inspired by Stanford CS 329P 2021 slides</figcaption>
    <br />
</figure>

<p>Above we see an example of using ImageNet pre-trained weights to classify objects from the Fashion MNIST dataset. A bit of an overkill example, but you get the point.</p>

<p>There are three main ways you might go about transfer learning:</p>
<ol>
  <li>
    <p>Use the pre-trained model as a pre-trained feature extractor by freezing its hidden layers (and replacing its head with your own). This works well when your task isn’t too different from the pre-trained model’s task.</p>
  </li>
  <li>
    <p>Finetune the pre-trained model completely by not freezing any layers</p>
  </li>
  <li>
    <p>Finetune but freeze some number layers. There are two main risks with this approach: (1) the higher-level early neurons are more specialized than we expected, and (2) splitting &amp; combining two arbitrary layers causes a mismatch in learned features that cannot be relearned by earlier layers.</p>
  </li>
</ol>

<p>Thanks to the open-source community there are many places you can find pre-trained models, like PyTorch Hub, HuggingFace, and TensorFlow Hub to name a few.</p>

<h3 id="segmentation-example">Segmentation Example</h3>

<h4 id="1-loading-the-model">1. Loading the Model</h4>

<p>I’ve used the DeepLabv3 model from <a href="https://pytorch.org/hub/pytorch_vision_deeplabv3_resnet101/">Pytorch Hub</a> and gotten some pretty great results. We first start by loading the pre-trained weights into the model:</p>

<pre><code class="language-Python">import torchvision

# there are three model sizes: MobileNet, ResNet50, and ResNet101
weights = torchvision.models.segmentation.DeepLabV3_ResNet50_Weights.DEFAULT
model = torchvision.models.segmentation.deeplabv3_resnet50(weights=weights).to(device)
</code></pre>

<p>Then we need to replace the classifier layer but to do that we need to know its input dimension. The easiest way I’ve found to do that is to use <code class="language-plaintext highlighter-rouge">torchinfo.summary()</code>:</p>

<pre><code class="language-Python">from torchinfo import summary

summary(
    model=model, 
    input_size=(2, 3, 1024, 1024), 
    col_names=["input_size", "output_size", "num_params", "trainable"], 
    col_width=20, 
    row_settings=["var_names"]
)
</code></pre>

<p>which prints out:</p>

<pre><code class="language-#1">===========================================================================================================================
Layer (type (var_name))                            Input Shape          Output Shape         Param #              Trainable
===========================================================================================================================
DeepLabV3 (DeepLabV3)                              [2, 3, 1024, 1024]   [2, 2, 1024, 1024]   --                   True
├─IntermediateLayerGetter (backbone)               [2, 3, 1024, 1024]   [2, 2048, 128, 128]  --                   True
│    └─Conv2d (conv1)                              [2, 3, 1024, 1024]   [2, 64, 512, 512]    9,408                True
│    └─BatchNorm2d (bn1)                           [2, 64, 512, 512]    [2, 64, 512, 512]    128                  True
│    └─ReLU (relu)                                 [2, 64, 512, 512]    [2, 64, 512, 512]    --                   --
│    └─MaxPool2d (maxpool)                         [2, 64, 512, 512]    [2, 64, 256, 256]    --                   --
│    └─Sequential (layer1)                         [2, 64, 256, 256]    [2, 256, 256, 256]   --                   True
│    │    └─Bottleneck (0)                         [2, 64, 256, 256]    [2, 256, 256, 256]   75,008               True
│    │    └─Bottleneck (1)                         [2, 256, 256, 256]   [2, 256, 256, 256]   70,400               True
│    │    └─Bottleneck (2)                         [2, 256, 256, 256]   [2, 256, 256, 256]   70,400               True
.                                                           .                                                       .
.                                                           .                                                       .
.                                                           .                                                       .
├─DeepLabHead (classifier)                         [2, 2048, 128, 128]  [2, 2, 128, 128]     --                   True
│    └─ASPP (0)                                    [2, 2048, 128, 128]  [2, 256, 128, 128]   --                   True
│    │    └─ModuleList (convs)                     --                   --                   15,206,912           True
│    │    └─Sequential (project)                   [2, 1280, 128, 128]  [2, 256, 128, 128]   328,192              True
│    └─Conv2d (1)                                  [2, 256, 128, 128]   [2, 256, 128, 128]   589,824              True
│    └─BatchNorm2d (2)                             [2, 256, 128, 128]   [2, 256, 128, 128]   512                  True
│    └─ReLU (3)                                    [2, 256, 128, 128]   [2, 256, 128, 128]   --                   --
│    └─Conv2d (4)                                  [2, 256, 128, 128]   [2, 2, 128, 128]     514                  True
===========================================================================================================================
Total params: 39,633,986
Trainable params: 39,633,986
Non-trainable params: 0
Total mult-adds (T): 1.31
===========================================================================================================================
Input size (MB): 25.17
Forward/backward pass size (MB): 17650.16
Params size (MB): 158.54
Estimated Total Size (MB): 17833.87
===========================================================================================================================
</code></pre>

<p>From the <code class="language-plaintext highlighter-rouge">DeepLabHead (classifier)</code> line which has shape <code class="language-plaintext highlighter-rouge">[batch, in_channels, height, width]</code> we can see that we need <code class="language-plaintext highlighter-rouge">in_channels=2048</code> for our new classifier.</p>

<pre><code class="language-Python"># modify classifier layer for desired number of classes
# number for in_channels was found by examining the model architecture
model.classifier = DeepLabHead(in_channels=2048, num_classes=NUM_CLASSES)
</code></pre>

<h4 id="2-tensor-shapes">2. Tensor Shapes</h4>

<p>Then let’s try and understand the model’s output. From its documentation: <em>“The model returns an</em> <code class="language-plaintext highlighter-rouge">OrderedDict</code> <em>with two Tensors that are of the same height and width as the input Tensor …</em> <code class="language-plaintext highlighter-rouge">output['out']</code> <em>contains the semantic masks, and</em> <code class="language-plaintext highlighter-rouge">output['aux']</code> <em>contains the auxiliary loss values per-pixel.”</em></p>

<pre><code class="language-Python"># output['out'] is what we really want
# output is a tensor with shape [batch_size, num_classes, height, width]
output = model(X_train.to(device))["out"]
</code></pre>

<p>In order to calculate the loss we have to massage the tensors a bit. I chose <code class="language-plaintext highlighter-rouge">nn.CrossEntropyLoss()</code> as the loss function and its documentation allows the input to have shape <code class="language-plaintext highlighter-rouge">[batch_size, num_classes, height, width]</code> but its target must have shape <code class="language-plaintext highlighter-rouge">[batch_size, height, width]</code> so with help from the <code class="language-plaintext highlighter-rouge">einops</code> package:</p>

<pre><code class="language-Python">from einops import rearrange

# rearrange target
target = rearrange(target, "bat cla height width -&gt; (bat cla) height width")

# calculate loss
loss = loss_fn(output, target)
</code></pre>

<p>Now we notice that for each batch there is a dimension in the first index of the tensor for  <code class="language-plaintext highlighter-rouge">logit(false)</code> and <code class="language-plaintext highlighter-rouge">logit(true)</code> which is redundant. We can just keep <code class="language-plaintext highlighter-rouge">logit(true)</code> for each batch, take that softmax, binarize the predictions, and finally calculate accuracy.</p>

<pre><code class="language-Python"># modify output to be in format [logit(true)] for each sample
output = output[:, 1, :, :]

# take softmax
output = nn.functional.softmax(output, dim=1)

# binarize predictions &amp; calculate accuracy
y_pred = (output &gt; 0.5).type(torch.int32)
accuracy_fn = torchmetrics.Accuracy(task="binary", num_classes=NUM_CLASSES)
accuracy = accuracy_fn(y_pred)
</code></pre>

<h4 id="3-wrapping-up">3. Wrapping Up</h4>

<p>With the loss and accuracy for a batch we can go ahead and train our model. The only other trouble I had with with my custom dataset was that I didn’t realize <code class="language-plaintext highlighter-rouge">torchvision.transforms.ToTensor()</code> automatically divides a tensor by 256 so make sure your data is correctly scaled!</p>

<p>For experiment tracking I used <a href="https://wandb.ai/site">wandb</a> which was super simple to set up and let me easily visualize how tweaking some hyperparameters like batch size affected this model’s training. You can find how I created the dataset class, training loops, and experiment tracking for segmentation transfer learning in my <a href="https://github.com/akshaytrikha/transfer-learning/blob/main/segmentation/scripts/">GitHub</a> repository.</p>

<h3 id="classification-example">Classification Example</h3>
<p>Transfer learning for a classification task is virtually the same as segmentation and slightly easier. We start again by loading the pre-trained weights into the model and replacing the classifier layer so that it has the right input and output dimensions for our target problem.</p>

<pre><code class="language-Python">import torchvision

# there are multiple other model sizes
weights = torchvision.models.EfficientNet_B0_Weights.DEFAULT
model = torchvision.models.efficientnet_b0(weights=weights).to(device)

# if you wanted to freeze base layers
for param in model.features.parameters():
    param.requires_grad = False

# modify classifier layer for number of classes
# added dropout for more robustness
model.classifier = nn.Sequential(
    torch.nn.Dropout(p=0.2, inplace=True),
    nn.Linear(in_features=CLASSIFIER_IN_FEATURES, out_features=NUM_CLASSES),
).to(device)
</code></pre>

<p>The only tricky thing here is calculating <code class="language-plaintext highlighter-rouge">CLASSIFIER_IN_FEATURES</code>, which was found by printing out the model’s layers using <code class="language-plaintext highlighter-rouge">torchinfo.summary()</code>. The training step is more straightforward than the segmentation example:</p>

<pre><code class="language-Python"># forward pass
# outputs are in the format [logit(true)] for each sample
# logit = log(unnormalized probability)
outputs = model(X_train.to(device))

# calculate loss &amp; accuracy
loss = loss_fn(outputs, y_train)
accuracy = accuracy_fn(outputs, y_train)
</code></pre>

<p>There you have it, now you can use transfer learning for both segmentation and classification tasks.</p>

<h4 id="resources">Resources:</h4>
<ul>
  <li><a href="https://cs231n.github.io/transfer-learning">https://cs231n.github.io/transfer-learning</a></li>
  <li><a href="https://arxiv.org/pdf/1411.1792.pdf">How transferable are features in deep neural networks?</a></li>
  <li><a href="https://www.learnpytorch.io/06_pytorch_transfer_learning/">https://www.learnpytorch.io/06_pytorch_transfer_learning/</a></li>
</ul>]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[Recall when beginning to train a neural network its weights might be initialized randomly. What if you could start training with a leg up because the network already has some useful information inside of it? Transfer learning is that leg up where you can repurpose models trained on similar tasks and use them for your specific task instead of training from scratch.]]></summary></entry><entry><title type="html">Trump or Computer Dump?</title><link href="http://localhost:4000/deep-learning/2023/04/23/trump-or-computer-dump.html" rel="alternate" type="text/html" title="Trump or Computer Dump?" /><published>2023-04-23T14:53:17-07:00</published><updated>2023-04-23T14:53:17-07:00</updated><id>http://localhost:4000/deep-learning/2023/04/23/trump-or-computer-dump</id><content type="html" xml:base="http://localhost:4000/deep-learning/2023/04/23/trump-or-computer-dump.html"><![CDATA[<script type="module" src="https://gradio.s3-us-west-2.amazonaws.com/3.27.0/gradio.js"></script>

<gradio-app src="https://akshaytrikha-gpt2-trump.hf.space"></gradio-app>

<p>In early 2019 OpenAI published some <a href="https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf">research</a> showing that large language models, when trained on colossal amounts of text, begin to behave in unpredictably intelligently on tasks they weren’t originally trained on. Humorously, part of the original dataset for the model was scraped from Reddit - which isn’t always known to be the home of constructive conversation and accurate information so it’s even more surprising how good their model was!</p>

<p>A year after that, while taking a natural language processing course I thought it would be fun to finetune GPT-2 on a corpus of then President Trump’s tweets seeing as he has such a distinct style and voice. I obtained his tweets from the super convenient <a href="https://www.thetrumparchive.com/">Trump Twitter Archive</a> which contained ~56,500 of his tweets from 2009 until he was banned from the platform on January 8th, 2021.</p>

<p>The original project took me around 3 weeks if I remember correctly and this weekend as I was dog sitting I remembered that project and got excited about trying to recreate it with the latest tools available, namely HuggingFace. It was awesome to have a benchmark to compare against to measure and truly appreciate the efficiency and ergonomics of HuggingFace’s transformers library. I was able to replicate the finetuning through a short <a href="https://github.com/akshaytrikha/GPT-2-Trump/blob/master/huggingface_trump.ipynb">notebook</a> + host it using gradio on a HuggingFace space in just a couple of days.</p>

<h3 id="finetuning-with-huggingface-transformers">Finetuning with HuggingFace Transformers</h3>

<p>First I defined some hyperparams for training:</p>

<pre><code class="language-Python"># define some params for model
batch_size = 8
epochs = 15
learning_rate = 5e-4
epsilon = 1e-8
warmup_steps = 1e2
sample_every = 100  # produce sample output every 100 steps
max_length = 140  # max length used in generate() method of model
</code></pre>

<p>Assuming the twitter data is downloaded and preprocessed, we need to tokenize the tweets (which means assign a unique <code class="language-plaintext highlighter-rouge">int</code> to every word or character) and load them into a dataloader. The <code class="language-plaintext highlighter-rouge">AutoTokenizer</code> is really nice because it uses the right tokenizer for any specific model available on HuggingFace if you give it a model name e.g.<code class="language-plaintext highlighter-rouge">"gpt2-medium"</code>.</p>

<pre><code class="language-Python">from transformers import (
	AutoTokenizer
    TextDataset,
    DataCollatorForLanguageModeling
)

# create tokenized datasets
tokenizer = AutoTokenizer.from_pretrained(
    "gpt2-medium",
    pad_token='&lt;|endoftext|&gt;'
)

# custom load_dataset function because there are no labels
def load_dataset(train_path, dev_path, tokenizer):
    block_size = 128
    # block_size = tokenizer.model_max_length

    train_dataset = TextDataset(
          tokenizer=tokenizer,
          file_path=train_path,
          block_size=block_size)

    dev_dataset = TextDataset(
          tokenizer=tokenizer,
          file_path=dev_path,
          block_size=block_size)

    data_collator = DataCollatorForLanguageModeling(
        tokenizer=tokenizer, mlm=False,
    )
    return train_dataset, dev_dataset, data_collator

train_dataset, dev_dataset, data_collator = load_dataset(
	train_path, dev_path, tokenizer
)
</code></pre>

<p>Now we can instantiate the model, optimizer, and learning rate scheduler. I’d never experimented with dynamically changing the learning rate during training so using <code class="language-plaintext highlighter-rouge">get_linear_schedule_with_warmup()</code> was exciting. The resulting learning rate vs. epochs graph looked like this:</p>

<figure>
    <br />
	<div style="text-align: center">
		<img src="http://localhost:4000/assets/trumpdump/learning-rate.png" alt="linear learning rate schedule" style="width: 90%" />
	</div>
    <br />
</figure>

<p>which shows a delay in reaching the <code class="language-plaintext highlighter-rouge">learning_rate</code> by <code class="language-plaintext highlighter-rouge">num_epoch_steps</code> and then a slow decrease until the nth epoch.</p>

<pre><code class="language-Python">from transformers import (
    AutoModelWithLMHead,
    get_linear_schedule_with_warmup,
)

# AutoModelWithLMHead will pick GPT-2 weights from name
model = AutoModelWithLMHead.from_pretrained(
	model_name,
	cache_dir=Path('cache').resolve()
)

# necessary because of additional bos, eos, pad tokens to embeddings
model.resize_token_embeddings(len(tokenizer))

# create optimizer and learning rate schedule
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate, eps=epsilon)

training_steps = len(train_dataset) * epochs

# adjust learning rate during training
scheduler = get_linear_schedule_with_warmup(
	optimizer,
	num_warmup_steps = warmup_steps,
	num_training_steps = training_steps
)
</code></pre>

<p>Finally we can instantiate a <code class="language-plaintext highlighter-rouge">TrainingArguments</code> object which holds hyperparams and then run training from the <code class="language-plaintext highlighter-rouge">Trainer</code> object. This also prints out a pretty printed loss vs. step table.</p>

<pre><code class="language-Python">from transformers import (
    Trainer,
    TrainingArguments,
)

training_args = TrainingArguments(
    output_dir="./gpt-2-medium-trump",
    num_train_epochs=epochs,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    eval_steps = 400, # n update steps between two evaluations
    save_steps=800, # n steps per model save
    warmup_steps=500, # n warmup steps for learning rate scheduler
)

trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=train_dataset,
    eval_dataset=dev_dataset,
)

# train &amp; save model run after done
trainer.train()
trainer.save_model()
</code></pre>

<h3 id="inference-with-huggingface-transformers">Inference with HuggingFace Transformers</h3>

<p>Inference was even easier than training as all you need to do is set up a <code class="language-plaintext highlighter-rouge">pipeline</code> for the model:</p>

<pre><code class="language-Python">from transformers import pipeline

trump = pipeline(
	"text-generation",
	model="./gpt-2-medium-trump",
	tokenizer=tokenizer,
	config={"max_length":max_length}  # n tokens
)
</code></pre>

<p>Trump at your fingertips</p>

<pre><code class="language-Python">In:  trump("Today I'll be")[0]["generated_text"]

Out: "Today I'll be rallying w/ @FEMA, First Responders, Law Enforcement,
and First Responders of Puerto Rico to help those most affected by the
#IrmaFlood.https://t.co/gsFSghkmdM"
</code></pre>

<h4 id="resources">Resources:</h4>

<ul>
  <li><a href="https://huggingface.co/learn/nlp-course/chapter3/3?fw=pt">HuggingFace Trainer</a></li>
  <li><a href="https://huggingface.co/gpt2">GPT-2 Model Card</a></li>
  <li><a href="https://github.com/akshaytrikha/GPT-2-Trump/blob/master/huggingface_trump.ipynb">GPT-2 Trump notebook</a></li>
</ul>]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Neural Style Transfer Webcam</title><link href="http://localhost:4000/deep-learning/2021/07/16/neural-style-transfer-webcam.html" rel="alternate" type="text/html" title="Neural Style Transfer Webcam" /><published>2021-07-16T05:50:00-07:00</published><updated>2021-07-16T05:50:00-07:00</updated><id>http://localhost:4000/deep-learning/2021/07/16/neural-style-transfer-webcam</id><content type="html" xml:base="http://localhost:4000/deep-learning/2021/07/16/neural-style-transfer-webcam.html"><![CDATA[<h3 id="overview">Overview</h3>

<p>I wanted to learn how to build and deploy an ML system in the real world and thought this would be a fun place to start. You can find my project’s code <a href="https://github.com/akshaytrikha/style-transfer">here</a>.</p>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/style-transfer/style-transfer.gif" alt="style transfer demo gif" style="width: 100%" />
        <figcaption style="text-align: center">
            Try the demo yourself <a href="https://akshaytrikha.github.io/style-transfer/" target="_blank" rel="noopener noreferrer">here</a>
        </figcaption>
    </div>
    <br />
</figure>

<!-- <figure>
    <br>

        <img src="http://localhost:4000/assets/mask-finding/fast_mask_finding.png" alt="ML defect detection"/>
        <figcaption>Fig 1. Mask Finding</figcaption>

    <br>
</figure> -->

<p>Using your webcam as input, this project generates stylized images in 400ms intervals. It uses two pretrained Tensorflow.js neural networks, sourced from Reiichiro Nakano’s <a href="https://github.com/reiinakano/arbitrary-image-stylization-tfjs">arbitrary-image-stylization-tfjs</a> repo.</p>

<ol>
  <li>The first network is used to learn the style of a given image and generate a style representation.</li>
  <li>The second network is then used for style transfer, or using the style representation to generate a stylized output image.</li>
</ol>

<p>The original models were actually regular tf models, but Reiichiro distilled them into smaller networks so they would run faster. For a more detailed breakdown of how the networks work, check out his blog <a href="https://magenta.tensorflow.org/blog/2018/12/20/style-transfer-js/">post</a>.</p>

<h3 id="building-the-react-app">Building the React App</h3>

<p>I used Nicholas Renotte’s <a href="https://github.com/nicknochnack/ReactComputerVisionTemplate">ReactComputerVisonTemplate</a> repo as a template for interfacing with a webcam and rendering output back on screen. The big idea is to use the <code class="language-plaintext highlighter-rouge">react-webcam</code> component to take screenshots, generate their style representations, and then display their stylized images. In pseudo-ish code the entire app is basically:</p>

<pre><code class="language-JavaScript">import Webcam from "react-webcam";

const predict = async () =&gt; {
    // First wait for models to load
    await loadModels();
    // init style image and generate style representation
    await initStyleImage();

    // every 400ms
    setInterval(() =&gt; {
        captureScreenshot();
        generateStylizedImage();
    }, 400);
}
</code></pre>

<h3 id="lessons-learned">Lessons learned</h3>

<ol>
  <li>
    <p>A very fun fact about using TensorFlow.js is that your browser is locally running inference, and all your data is kept on your device.</p>
  </li>
  <li>
    <p>You have to do a lot of things asynchronously e.g. fetching the models, loading the models, running inference. Timing all of this was how I decided to introduce the delay of 400ms.</p>
  </li>
  <li>
    <p>tfjs is slightly different to using tf in python in small ways. You have to use methods like <code class="language-plaintext highlighter-rouge">tf.ready().then(() =&gt; {})</code> that returns a promise when tfjs is ready (if the WebGL backend is ready).</p>
  </li>
  <li>
    <p>I used the html <code class="language-plaintext highlighter-rouge">canvas</code> element to display images and would use <code class="language-plaintext highlighter-rouge">document.getElementById("element-name").src = ...</code> directly to update an element. I standardized the display sizes in px to make it easier to deal with.</p>
  </li>
  <li>
    <p>To make them persistent I stored the model weights in the repo itself so that they’re accessible with e.g. <code class="language-plaintext highlighter-rouge">transferModel = await tf.loadGraphModel(process.env.PUBLIC_URL + '/models/style-prediction/model.json')</code></p>
  </li>
</ol>

<h4 id="resources">Resources:</h4>

<ul>
  <li><a href="https://github.com/reiinakano/arbitrary-image-stylization-tfjs">https://github.com/reiinakano/arbitrary-image-stylization-tfjs</a></li>
  <li><a href="https://magenta.tensorflow.org/blog/2018/12/20/style-transfer-js/">https://magenta.tensorflow.org/blog/2018/12/20/style-transfer-js/</a></li>
  <li><a href="https://styletransfer.art">https://styletransfer.art</a></li>
</ul>]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[Overview]]></summary></entry><entry><title type="html">Barium Titanate Permittivity &amp;amp; Image Processing</title><link href="http://localhost:4000/2021/07/14/bto-image-processing.html" rel="alternate" type="text/html" title="Barium Titanate Permittivity &amp;amp; Image Processing" /><published>2021-07-14T14:53:17-07:00</published><updated>2021-07-14T14:53:17-07:00</updated><id>http://localhost:4000/2021/07/14/bto-image-processing</id><content type="html" xml:base="http://localhost:4000/2021/07/14/bto-image-processing.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">The Bias-Expressivity Trade-off</title><link href="http://localhost:4000/deep-learning/2019/11/09/bias-expressivity-tradeoff.html" rel="alternate" type="text/html" title="The Bias-Expressivity Trade-off" /><published>2019-11-09T13:53:17-08:00</published><updated>2019-11-09T13:53:17-08:00</updated><id>http://localhost:4000/deep-learning/2019/11/09/bias-expressivity-tradeoff</id><content type="html" xml:base="http://localhost:4000/deep-learning/2019/11/09/bias-expressivity-tradeoff.html"><![CDATA[]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">The Futility of Bias-Free Learning and Search</title><link href="http://localhost:4000/deep-learning/2019/07/25/futility-of-bias-free-learning-and-search.html" rel="alternate" type="text/html" title="The Futility of Bias-Free Learning and Search" /><published>2019-07-25T14:53:17-07:00</published><updated>2019-07-25T14:53:17-07:00</updated><id>http://localhost:4000/deep-learning/2019/07/25/futility-of-bias-free-learning-and-search</id><content type="html" xml:base="http://localhost:4000/deep-learning/2019/07/25/futility-of-bias-free-learning-and-search.html"><![CDATA[]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[]]></summary></entry></feed>