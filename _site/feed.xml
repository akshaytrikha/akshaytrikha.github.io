<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-15T21:50:54-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Akshay Trikha</title><subtitle></subtitle><entry><title type="html">Physics-Constrained Neural Networks for Solving Partial Differential Equations</title><link href="http://localhost:4000/deep-learning/2024/03/11/darcy-flow.html" rel="alternate" type="text/html" title="Physics-Constrained Neural Networks for Solving Partial Differential Equations" /><published>2024-03-11T06:11:17-07:00</published><updated>2024-03-11T06:11:17-07:00</updated><id>http://localhost:4000/deep-learning/2024/03/11/darcy-flow</id><content type="html" xml:base="http://localhost:4000/deep-learning/2024/03/11/darcy-flow.html"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML">
</script>

<p><strong>Background</strong></p>

<p>A neural network learns a function to map inputs to outputs. Because solutions to differential equations are also functions we can use neural networks to solve them!</p>

<p>Oftentimes in physics we want solutions to differential equations that obey the laws of physics. For example, we don’t want solutions that violate conservation laws or predict things like negative mass or density. How do we force a neural network to only predict functions that satisfy some physical constraint?</p>

<hr />
<p><br />
<strong>Darcy Flow</strong></p>

<p>Let’s take the example of 2D darcy flow, a time-independent partial differential equation (PDE) that describes the flow of a fluid through a porous medium. The solution to this PDE tells us the pressure distribution of the fluid at a given spatial point - and from that we can derive the flow rate and direction of fluid motion.</p>

<p>Darcy flow states:</p>

\[\begin{align}
    -\nabla \cdot q &amp;= f(x,y) &amp;&amp; x,y \in (0,1) \tag{1} \newline
    q &amp;= \nu(x,y) \nabla u(x,y) &amp;&amp; \tag{2} \newline
\end{align}\]

<p>With boundary condition</p>

\[\begin{align}
    \underbrace{u(x,y)}_{\text{PDE solution}} &amp;= 0 &amp;&amp; \qquad \qquad \quad x,y \in \partial(0,1)^2 \tag{3}
\end{align}\]

<p>Where:
\begin{align}
    u(x, y) &amp;= \text{pressure distribution}, \newline
    q &amp;= \text{flow rate}, \newline
    \nu(x, y) &amp;= \text{diffusion coefficient}, \newline
    \nabla &amp;= \text{divergence operator}, \newline
    f(x, y) &amp;= 
    \begin{cases} 
        \text{source} &amp; \text{if } f(x, y) &gt; 0 \newline
        \text{sink} &amp; \text{if } f(x, y) &lt; 0
    \end{cases}
    = 1
\end{align}</p>

<p>We can boil this fancy law down to a conservation of mass. In english, eq. \((1)\) states that the amount of fluid entering a region (\(-\nabla \cdot q\)) must either leave it or be accounted for by the source / sink (\(f(x,y)\)). For this problem, we’re setting \(f(x,y) = 1\) as a <em>hard constraint</em> to mean that there is a constant source of fluid in the system and we want to learn a model that predicts the pressure distribution. We’re going to train a model to solve the PDE given the hard, physics, constraint.</p>

<hr />
<p><br />
<strong>Data</strong></p>

<p>The dataset we’re using gives us the diffusion coefficient \(\nu(x, y)\) as input and has the pressure distribution \(u(x,y)\) as output labels. The model is then learning the relationship of how different materials’ diffusion coefficients affect how fluids flow through them. In order to discretize the problem we’re also going to pass in a finite mesh so that our model has a spatial box to operate on. The mesh grid stays the same for every sample, but the diffusion coefficient changes. So the shapes of these are:</p>

<ol>
  <li>Mesh: [Batch, \(N_x\), \(N_y\), 2] where \(N_x\) &amp; \(N_y\) are the number of grid points and 2 represents the x,y coordinates at each point</li>
  <li>Diffusion coefficient \(\nu\): [Batch, \(N_x\), \(N_y\), 1] the same as above except we only have 1 dimension to predict for each grid point</li>
</ol>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/darcy-flow/architecture_1.png" alt="Darcy Flow Neural ODE Architecture" />
        <figcaption>Fig 1. Architecture</figcaption>
    </div>
    <br />
</figure>

<!-- # TODO: talk about loss -->

<p>Data is available courtesy of the <a href="http://tensorlab.cms.caltech.edu/users/anima/">Anima AI + Science Lab</a> Lab at CalTech as part of their work <a href="https://arxiv.org/pdf/2010.08895">[3]</a>. For training data we will use the url <a href="https://drive.google.com/file/d/16kmLCmuPe_q_wpphEXtgJswFtxHE6Plf/view?usp=sharing">[4]</a>  and for validation the url <a href="https://drive.google.com/file/d/1sQBpormuajXlf2h3YiMnL9qVzzFoSwBB/view?usp=sharing">[5]</a>.</p>

<hr />
<p><br />
<strong>Constrained Model</strong></p>

<p>Ok great, we have a partial differential equation and our goal is to train a neural network that guesses solutions to this. In our heads, we imagine our solutions could be expressed as a linear combination of basis functions and their corresponding weights. This is a fancy way of saying that our final function might be comprised of applying combinations of differently sized lego-brick functions.</p>

\[u = \sum_i K_i w_i \tag{4}\]

<p>Where:
\begin{align}
    K &amp;= \text{set of basis functions}, \\<br />
    w &amp;= \text{weights for each basis function} \\<br />
\end{align}</p>

<p>Now we see a problem - we need to optimize two things with this approach: generating optimal basis functions in addition to optimal weights for our final prediction to be good. This type of problem is called bi-level optimization and we’re gonna solve it with wizardry (or at least I think so).</p>

<p>So now our plan is to have the neural network predict the basis functions, and then we’ll stack a linear solver to calculate the weights. The solver will ensure they satisfy the constraint imposed by the forcing function \(f(x,y)=1\). In other words, <strong>the linear solver layer is how we implement our physical constraint.</strong></p>

<!-- \begin{align}
    \tag{5}
\end{align} -->

<p>\begin{align}
    K(\theta) w^{\ast}(\theta) = f(x,y) \iff K(\theta) w^{\ast}(\theta) - 1 = 0 &amp; \tag{5} \newline
\end{align}</p>

<p>(using \(w^*\) to represent the optimal weights for a given set of basis functions \(K\)).</p>

<hr />
<p><br />
<strong>How to Backpropagate?</strong></p>

<p>In order for our model to learn anything we’re going to need to pass the gradients backwards from the linear solver layer to the ResNet. In an ideal world we could simply write out a chain rule like so:</p>

<!-- $$\theta^{l+1} = \theta^l - \alpha \cdot \frac{DL}{D\theta} \tag{6}$$ -->

\[\frac{\partial \mathcal{L}}{\partial \theta} = \frac{\partial \mathcal{L}}{\partial w^{*}} \cdot \frac{\partial w^{*}}{\partial \theta} \tag{6}\]

<p>But with this weird linear solver layer in our system what is the relationship between between its weights and the neural network’s weights? Is it computationally feasible to directly calculate \(\frac{\partial \mathcal{L}}{\partial w^{*}}\)? To do so would mean we would have to find the gradients of each step of the solver with respect to the parameters, for every iteration it takes to converge. This quickly becomes a nightmare in terms of computation, memory, and stability.</p>

<p>Instead of doing that we could also link \(w^*(\theta)\) and \(\theta\) through the optimality condition we defined in eq. \((5)\). However, because the linear solver’s weights \(w\) don’t have an explicit dependence on \(\theta\), we’ll have to differentiate the expression implicitly <a href="https://arxiv.org/pdf/2105.15183">[1]</a>:</p>

\[\begin{align}
    \frac{\partial}{\partial \theta} \left( K(\theta) w^{\ast}(\theta) - 1 \right) = 0 \newline

   \underbrace{\frac{\partial F}{\partial w}}_{A} \underbrace{\frac{\partial w^*(\theta)}{\partial \theta}}_{J_1} + \underbrace{\frac{\partial F}{\partial K}}_{B} \frac{\partial K(\theta)}{\partial \theta} = 0 &amp; \tag{7} \newline
\end{align}\]

<p>We can directly compute \(A\) and \(B\) as outputs of the forward pass and our weights:</p>

\[\begin{align}
    A &amp;= \frac{\partial}{\partial w} \left( K(\theta) w - 1 \right) = K(\theta), \newline
    B &amp;= \frac{\partial}{\partial K} \left( K w(\theta) - 1 \right) = w^*(\theta), \newline
    J_1 &amp;= \frac{\partial w^*(\theta)}{\partial \theta} = \quad ?
\end{align}\]

<p>But what is \(J_1\)? Let’s rearrange our expression to see if we can solve for it.</p>

\[\begin{align}
    AJ_1 + B \frac{\partial K(\theta)}{\partial \theta} = 0 \newline
    J_1 = A^{-1} B \frac{\partial K(\theta)}{\partial \theta} \newline
    \frac{\partial w^*(\theta)}{\partial \theta} = -K(\theta)^{-1} w^*(\theta) \frac{\partial K}{\partial \theta} \tag{8}
\end{align}\]

<p>Great! So now we can compute all the terms that lead to \(\frac{\partial w^*}{\partial \theta}\). Let’s substitute our expression in eq. \((8)\) into eq. \((6)\):</p>

\[\frac{\partial \mathcal{L}}{\partial \theta} = - \frac{\partial \mathcal{L}}{\partial w^{*}} \cdot K(\theta)^{-1} w^*(\theta) \frac{\partial K}{\partial \theta} \tag{9}\]

<p>We now have a way to backpropagate through the linear solver 🎉</p>

<hr />
<p><br />
<strong>Implementation</strong></p>

<p>Our model class is going to look something like this:</p>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/darcy-flow/ConstrainedModel.png" alt="ConstrainedModel class implementation" />
        <figcaption>Fig 2. ConstrainedModel class</figcaption>
    </div>
    <br />
</figure>

<!-- ```Python
class ConstrainedModel(nn.Module):
    def __init__(self, in_dim: int, hidden_dims: Tuple[int], n_basis_functions: int):
        super().__init__()
        self.n_basis_functions = n_basis_functions
        self.resnet = ResNet(in_dim, hidden_dims, n_basis_functions)

    def forward(
            self, mesh: torch.Tensor, diffusion_coeffs: torch.Tensor
        ) -> torch.Tensor:
        """
        Args:
            mesh: mesh coordinates (batch x Nx x Ny x 2) 
            diffusion_coeffs: diffusion coefficients (batch x Nx x Ny x 1)
        Returns:
            u: solution (batch x Nx x Ny x 1)
        """
        # 1. neural network predicts basis functions 
        basis = self.resnet(mesh, diffusion_coeffs)
        
        # 2. solve linear system Kw = b for optimal basis functions' weights
        K, b = self.setup_linear_system(basis, mesh, diffusion_coeffs)
        w = LinearSolve.apply(K, b)
        
        # 3. compute solution u = basis * weights
        u = basis @ w.T
        
        return u
``` -->

<p>But in order to pass gradients through the <code class="language-plaintext highlighter-rouge">LinearSolve</code> layer we’re going to have to tell PyTorch our new backward pass rule:</p>

<!-- ```Python
import torch

class LinearSolve(torch.autograd.Function):
    @staticmethod
    def forward(ctx, K, b):
        """Solve the linear system Kw = b. K is a batch of matrices and b is a batch of vectors.
        K has to be square (invertible).

        Args:
            ctx (torch.autograd.function.LinearSolveBackward): autograd context
            K (torch.Tensor): matrix K (K x N x N)
            b: torch.Tensor - vector b (K x N)

        Returns:
            (torch.Tensor): solution (K x N)
        """
        # solve the linear system
        w_star = torch.linalg.solve(K, b)

        # save for backward pass
        ctx.save_for_backward(K, w_star, b)

        return w_star
    
    @staticmethod
    def backward(ctx, upstream_grad):
        """Compute the gradient of the linear solver with respect to K and b.

        Args:
            ctx: autograd context
            upstream_grad (torch.Tensor): upstream gradient from the loss
        Returns:
            torch.Tensor (B x N x N), torch.Tensor (B x N): gradients with respect to K and b
        """
        # Goal: Use implicit differentiation to compute dw*/dθ = -inv(K) * w* * dK/dθ

        # 1. retrieve useful tensors from forward pass
        K, b, w_star = ctx.saved_tensors

        # 2. compute vjp_grad = -K^{-T} * upstream_grad
        vjp_grad = torch.linalg.solve(-torch.transpose(K, 1, 2), upstream_grad)

        # 3. define the optimality condition: Kw* - b = 0
        def optimality_cond(_K, _b):
            """In our case _b is always 1, but here we've left it general"""
            return torch.bmm(_K, w_star.unsqueeze(-1)).squeeze(-1) - _b

        # 4. perform vector-Jacobian product (VJP) for optimality condition
        evaluations, funct_ = torch.autograd.functional.vjp(optimality_cond, K, b)

        # 5. apply VJP function to compute final gradients
        return funct_(vjp_grad)
``` -->

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/darcy-flow/LinearSolve.png" alt="LinearSolve class implementation" />
        <figcaption>Fig 3. LinearSolve class</figcaption>
    </div>
    <br />
</figure>

<p>Ok so there’s a lot going on here so let’s break it down. For the implementation we rewrite eq. \((9)\) like so:</p>

\[\frac{\partial \mathcal{L}}{\partial \theta} = w^*(\theta) \cdot \underbrace{v \cdot -K(\theta)^{-1}}_{\texttt{vjp_grad}} \underbrace{\frac{\partial K}{\partial \theta}}_{J_2} \tag{10}\]

<p>Where</p>

\[\begin{align}
    v &amp;= \frac{\partial \mathcal{L}}{\partial w^{*}} = \text{upstream gradient}, \newline
    J_2 &amp;= \text{Jacobian of the function $K$ with respect to $\theta$} \newline
\end{align}\]

<p>\(\texttt{vjp_grad} \times J_2\) is called a vector-Jacobian product (VJP) and it’s the reason why reverse-mode auto differentiation is so efficient [6]. Because taking the inverse of a matrix in \(K^{-1}\) is sometimes not numerically stable we instead find \(\texttt{vjp_grad}\) by solving the linear system:</p>

\[\begin{align}
    K^Tx = - \frac{\partial \mathcal{L}}{\partial w^{*}} \tag{11} \newline
\end{align}\]

<p>Then we formulate a functional form of the VJP and finally apply it to <code class="language-plaintext highlighter-rouge">vjp_grad</code>.</p>

<h4 id="references">References:</h4>

<ul>
  <li><a href="https://arxiv.org/pdf/2105.15183">[1] Efficient and Modular Implicit Differentiation</a></li>
  <li><a href="https://arxiv.org/pdf/2207.08675">[2] Learning Differentiable Solvers For Systems With Hard Constraints</a></li>
  <li><a href="https://arxiv.org/pdf/2010.08895">[3] Fourier Neural Operator for Parametric Partial Differential Equations</a></li>
  <li><a href="https://drive.google.com/file/d/16kmLCmuPe_q_wpphEXtgJswFtxHE6Plf/view?usp=sharing">[4] Darcy Flow Training Data</a></li>
  <li><a href="https://drive.google.com/file/d/1sQBpormuajXlf2h3YiMnL9qVzzFoSwBB/view?usp=sharing">[5] Darcy Flow Validation Data</a></li>
  <li>[6] To jog the memory, the Jacobian is the matrix of all partial derivatives for a function.</li>
</ul>

\[\begin{align}
    \text{Jacobian}(f) = 
    \begin{bmatrix}
        \frac{\partial f_1}{\partial x_1} &amp; \cdots &amp; \frac{\partial f_1}{\partial x_n} \newline
        \vdots &amp; \ddots &amp; \vdots \newline
        \frac{\partial f_m}{\partial x_1} &amp; \cdots &amp; \frac{\partial f_m}{\partial x_n}
    \end{bmatrix}
\end{align}\]

<p>But if we have a large neural network calculating the entire Jacobian matrix becomes too computationally expensive. Instead we take advantage of its structure by only multiplying the upstream grad \(v\) with every row of \(J\) without ever having to instantiate \(J\) in its entirety.</p>]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Universal Mask Finding</title><link href="http://localhost:4000/2023/09/24/universal-mask-finding.html" rel="alternate" type="text/html" title="Universal Mask Finding" /><published>2023-09-24T13:29:00-07:00</published><updated>2023-09-24T13:29:00-07:00</updated><id>http://localhost:4000/2023/09/24/universal-mask-finding</id><content type="html" xml:base="http://localhost:4000/2023/09/24/universal-mask-finding.html"><![CDATA[<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/mask-finding/fast_mask_finding.png" alt="ML defect detection" />
        <figcaption>Fig 1. Mask finding of a chocolate bar in the making</figcaption>
    </div>
    <br />
</figure>

<p><br />
<strong>Preface</strong></p>

<p>I write using analogy of working for Willy Wonka’s chocolate factory to demonstrate that this method could be used in any manufacturing context that uses computer vision for defect detection. It’s also just fun to think about mass producing chocolate.</p>

<p><br />
<strong>Background</strong></p>

<p>You recently got hired as an Oompa Loompa software engineer working at Willy Wonka’s chocolate factory on a team that images chocolate accross the various stages of the manufacturing line in order to find defects. They use all sorts of fancy cameras: 2D, 3D, radiographs - they know their stuff. This approach lets them both find defects quicker than waiting till the end of the factory line to find out something’s bad, and also allows scrapping defective material much earlier in the manufacturing process to cut losses.</p>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/mask-finding/defect_detection.gif" alt="ML defect detection" />
        <figcaption>Fig 2. Defect Detection</figcaption>
    </div>
    <br />
</figure>

<p>However, before we try and find defects in an image of a bar we’ve got to first find an area to search through for defects – otherwise a defect model might get confused and flag the background as defective. We’d also want constrain the defect search space as much as possible to make the defect model more efficient at flagging defects. I refer to this specific semantic segmentation task as “mask finding”.</p>

<p>For example, if your human neural network saw images in Fig 2. of bars-in-the-making, what features would you think distinguish it from the background? Maybe that a bar has four corners, is a different color than the background, and has a different surface consistency. If we as huamns can distinguish chocolate from it’s background we could probably write a rules based program for finding a segmentation mask, but the types of input images often rapidly changes:</p>

<ul>
  <li>Oompa Loompa scientists may iterate on the product and future chocolates might have different dimensions</li>
  <li>imaging conditions of inspection stations may change (different light color, angle)</li>
  <li>we may want to use a different type of camera (laser profiler, darkfield black boxes)</li>
</ul>

<p>All of which leads to a dizzying combination of image possibilities and you’d be playing a game of cat-and-mouse to keep up by writing separate image processing pipelines for each variation.</p>

<!-- It would be maybe 10x more difficult to build and maintain 40 different traditional image processing pipelines with human coded logic to find masks compared to using one ML model. -->

<p><br />
<strong>ML</strong></p>

<p>So then how do we scale this process up for hundreds of thousands of images a month across multiple image and camera types? Universal Mask Finding is an ML model I trained while I was at the chocolate factory to solve this problem. The magic of deep learning is that we don’t explicitly program the model to find the features we just mentioned, we ask the model to hopefully learn them automatically across our dataset.</p>

<p>The model is based on an off-the-shelf <a href="https://paperswithcode.com/method/u-net#:~:text=U%2DNet%20is%20an%20architecture,architecture%20of%20a%20convolutional%20network">U-Net</a> segmentation architecture with pretrained resnet34 weights and infers a pixel-level segmentation mask. That means, for every pixel in an image the model predicts the probability that it belongs to the foreground, or background. I fine-tuned a pretrained model originally trained on the ImageNet task with the relevant images of chocolates. More about transfer learning <a href="/deep-learning/2023/07/04/transfer-learning.html">here</a>.</p>

<p>We measure the performance of a segmentation model based on the Intersection over Union score, or IOU, which is a fancy way of saying what % of the prediction overlapped with a ground truth label.</p>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/mask-finding/IOU.gif" alt="mIOU" />
        <figcaption>Fig 2. Measuring performance with IOU</figcaption>
    </div>
    <br />
</figure>

<p>We can also do interesting things here with the inference probabilities like setting a lower <a href="https://scikit-learn.org/stable/auto_examples/model_selection/plot_precision_recall.html" target="\_blank">threshold</a> for the mask class like 0.3 to increase the recall (but at the cost of decreased precision).</p>

<p><br />
<strong>Generalization</strong></p>

<p>Often in machine learning we want a model to be able to generalize on a given task as much as possbile, and that’s probably a good marker that it’s learning something about the underlying nature of the problem. Somewhat counterintuitively, I found that I get the best performance by allowing a single model to learn features across all the varying “image types”. Examples of things I would separate into different “image type” categories include different cameras, backgrounds, and components.</p>

<p>To prove the model generalizes well I ran a simple study where I gradually increased the number of image types in the training set, and measured performance against unseen image types.</p>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/mask-finding/generalization.png" alt="generalization" />
        <figcaption>Fig 3. Generalization</figcaption>
    </div>
    <br />
</figure>

<p>And if we include all image types (dotted lines) during training we can close the gap to virtually perfect. This is particularly nice for two reasons:</p>

<ol>
  <li>because there is a lot of uncertainty in incoming images in production</li>
  <li>because this approach saves Willy Wonka $$$ per month in server costs compared to deploying 40 different models for each image type</li>
</ol>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/mask-finding/image_types.gif" alt="image-types" />
        <figcaption>Fig 4. Different image types encountered in production</figcaption>
    </div>
    <br />
</figure>

<p><br />
<strong>Building Trust: Classification Reviewer Model</strong></p>

<p>Some fellow Oompa Loompa cocoa scientists asked me how they could trust my mask finding model’s inferences - a very fair question. I tried developing rule based metrics to see if a mask had 4 corners, straight lines etc. but it turned out to be a difficult task as no one criteria would capture the complexities of judging mask finding quality. I realized that a deep learning model classifier would outperform any handwritten metrics I could come up with. This new classifier would run after each segmentation prediction and would have 3 classes:</p>

<figure style="display: flex; gap: 4.9%; text-align: center;">
    <div style="width: 30%;">
        <img src="http://localhost:4000/assets/mask-finding/grade_1.png" alt="ML defect detection" />
        <figcaption>Grade 1: inferred mask is perfect</figcaption>
    </div>
    <div style="width: 30%;">
        <img src="http://localhost:4000/assets/mask-finding/grade_2.png" alt="ML defect detection" />
        <figcaption>Grade 2: inferred mask is imperfect but can still be used for downstream defect detection</figcaption>
    </div>
    <div style="width: 30%;">
        <img src="http://localhost:4000/assets/mask-finding/grade_3.png" alt="ML defect detection" />
        <figcaption>Grade 3: inferred mask has poor quality and can't be trusted for defect defection</figcaption>
    </div>
</figure>

<p>Because I already had ground truth human labels for the segmentation task I already had a great set of examples for Grade 1. All I needed to do was find a handful Grade 2 and 3 failures and to my surprise the classifier had an <a href="https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc">AUC</a> of 0.995! We could now use the classifier’s predictions to understand whether or not to trust the segmentation model.</p>

<p><br />
<strong>Building Trust: Historical Performance</strong></p>

<p>To further build trust in the model I monitor how each image type, which is demarked by a metadata tag in the dataset, performs over time, making sure that all their respective mIOUs are close to 1. I also periodically check my historical data log to inspect how the model is doing in production and shuffle the dataset with the latest examples of failures. It’s very difficult for me to perfectly monitor this model in production and so I also rely on my fellow Oompa Loompa scientists and production managers to notify me if they notice a drop in inference quality.</p>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/mask-finding/historical_performance.png" alt="historical-performance" />
        <figcaption>Fig 5. Tracking historical performance </figcaption>
    </div>
    <br />
</figure>

<p>In general the number of image types for the model to run on have only been growing so I typicially also evaluate a new model based on a previous iteration’s dataset just to double check that I’m not noticing a drop in quality for older image types. It’s also fun to evaluate an older iteration on the latest model’s test dataset to quantify the improvement.</p>

<p>I’m proud this ML system has been robust while integrating new cameras and chocolate types and was able to scale to help the chocolate factory grow while delivering the best chocolate possible.</p>

<!-- ![Fast Mask Finding](../../../assets/fast_mask_finding.gif) -->]]></content><author><name></name></author><summary type="html"><![CDATA[Fig 1. Mask finding of a chocolate bar in the making]]></summary></entry><entry><title type="html">Transfer Learning in Computer Vision</title><link href="http://localhost:4000/deep-learning/2023/07/04/transfer-learning.html" rel="alternate" type="text/html" title="Transfer Learning in Computer Vision" /><published>2023-07-04T09:06:17-07:00</published><updated>2023-07-04T09:06:17-07:00</updated><id>http://localhost:4000/deep-learning/2023/07/04/transfer-learning</id><content type="html" xml:base="http://localhost:4000/deep-learning/2023/07/04/transfer-learning.html"><![CDATA[<p>Recall when beginning to train a neural network its weights might be initialized randomly. What if you could start training with a leg up because the network already has some useful information inside of it? Transfer learning <em>is</em> that leg up where you can repurpose models trained on similar tasks and use them for your specific task instead of training from scratch.</p>

<p>Benefits include:</p>

<ul>
  <li>training faster</li>
  <li>less training data</li>
  <li>boosts generalization</li>
  <li>might improve accuracy</li>
</ul>

<figure>
    <br />
    <img src="http://localhost:4000/assets/transfer-learning/transfer-learning.png" alt="transfer learning diagram" />
    <figcaption style="text-align: center">diagram inspired by Stanford CS 329P 2021 slides</figcaption>
    <br />
</figure>

<p>Above we see an example of using ImageNet pre-trained weights to classify objects from the Fashion MNIST dataset. A bit of an overkill example, but you get the point.</p>

<p>There are three main ways you might go about transfer learning:</p>

<ol>
  <li>
    <p>Use the pre-trained model as a pre-trained feature extractor by freezing its hidden layers (and replacing its head with your own). This works well when your task isn’t too different from the pre-trained model’s task.</p>
  </li>
  <li>
    <p>Finetune the pre-trained model completely by not freezing any layers</p>
  </li>
  <li>
    <p>Finetune but freeze some number layers. There are two main risks with this approach: (1) the higher-level early neurons are more specialized than we expected, and (2) splitting &amp; combining two arbitrary layers causes a mismatch in learned features that cannot be relearned by earlier layers.</p>
  </li>
</ol>

<p>Thanks to the open-source community there are many places you can find pre-trained models, like PyTorch Hub, HuggingFace, and TensorFlow Hub to name a few.</p>

<h3 id="segmentation-example">Segmentation Example</h3>

<h4 id="1-loading-the-model">1. Loading the Model</h4>

<p>I’ve used the DeepLabv3 model from <a href="https://pytorch.org/hub/pytorch_vision_deeplabv3_resnet101/">Pytorch Hub</a> and gotten some pretty great results. We first start by loading the pre-trained weights into the model:</p>

<pre><code class="language-Python">import torchvision

# there are three model sizes: MobileNet, ResNet50, and ResNet101
weights = torchvision.models.segmentation.DeepLabV3_ResNet50_Weights.DEFAULT
model = torchvision.models.segmentation.deeplabv3_resnet50(weights=weights).to(device)
</code></pre>

<p>Then we need to replace the classifier layer but to do that we need to know its input dimension. The easiest way I’ve found to do that is to use <code class="language-plaintext highlighter-rouge">torchinfo.summary()</code>:</p>

<pre><code class="language-Python">from torchinfo import summary

summary(
    model=model,
    input_size=(2, 3, 1024, 1024),
    col_names=["input_size", "output_size", "num_params", "trainable"],
    col_width=20,
    row_settings=["var_names"]
)
</code></pre>

<p>which prints out:</p>

<pre><code class="language-#1">===========================================================================================================================
Layer (type (var_name))                            Input Shape          Output Shape         Param #              Trainable
===========================================================================================================================
DeepLabV3 (DeepLabV3)                              [2, 3, 1024, 1024]   [2, 2, 1024, 1024]   --                   True
├─IntermediateLayerGetter (backbone)               [2, 3, 1024, 1024]   [2, 2048, 128, 128]  --                   True
│    └─Conv2d (conv1)                              [2, 3, 1024, 1024]   [2, 64, 512, 512]    9,408                True
│    └─BatchNorm2d (bn1)                           [2, 64, 512, 512]    [2, 64, 512, 512]    128                  True
│    └─ReLU (relu)                                 [2, 64, 512, 512]    [2, 64, 512, 512]    --                   --
│    └─MaxPool2d (maxpool)                         [2, 64, 512, 512]    [2, 64, 256, 256]    --                   --
│    └─Sequential (layer1)                         [2, 64, 256, 256]    [2, 256, 256, 256]   --                   True
│    │    └─Bottleneck (0)                         [2, 64, 256, 256]    [2, 256, 256, 256]   75,008               True
│    │    └─Bottleneck (1)                         [2, 256, 256, 256]   [2, 256, 256, 256]   70,400               True
│    │    └─Bottleneck (2)                         [2, 256, 256, 256]   [2, 256, 256, 256]   70,400               True
.                                                           .                                                       .
.                                                           .                                                       .
.                                                           .                                                       .
├─DeepLabHead (classifier)                         [2, 2048, 128, 128]  [2, 2, 128, 128]     --                   True
│    └─ASPP (0)                                    [2, 2048, 128, 128]  [2, 256, 128, 128]   --                   True
│    │    └─ModuleList (convs)                     --                   --                   15,206,912           True
│    │    └─Sequential (project)                   [2, 1280, 128, 128]  [2, 256, 128, 128]   328,192              True
│    └─Conv2d (1)                                  [2, 256, 128, 128]   [2, 256, 128, 128]   589,824              True
│    └─BatchNorm2d (2)                             [2, 256, 128, 128]   [2, 256, 128, 128]   512                  True
│    └─ReLU (3)                                    [2, 256, 128, 128]   [2, 256, 128, 128]   --                   --
│    └─Conv2d (4)                                  [2, 256, 128, 128]   [2, 2, 128, 128]     514                  True
===========================================================================================================================
Total params: 39,633,986
Trainable params: 39,633,986
Non-trainable params: 0
Total mult-adds (T): 1.31
===========================================================================================================================
Input size (MB): 25.17
Forward/backward pass size (MB): 17650.16
Params size (MB): 158.54
Estimated Total Size (MB): 17833.87
===========================================================================================================================
</code></pre>

<p>From the <code class="language-plaintext highlighter-rouge">DeepLabHead (classifier)</code> line which has shape <code class="language-plaintext highlighter-rouge">[batch, in_channels, height, width]</code> we can see that we need <code class="language-plaintext highlighter-rouge">in_channels=2048</code> for our new classifier.</p>

<pre><code class="language-Python"># modify classifier layer for desired number of classes
# number for in_channels was found by examining the model architecture
model.classifier = DeepLabHead(in_channels=2048, num_classes=NUM_CLASSES)
</code></pre>

<h4 id="2-tensor-shapes">2. Tensor Shapes</h4>

<p>Then let’s try and understand the model’s output. From its documentation: <em>“The model returns an</em> <code class="language-plaintext highlighter-rouge">OrderedDict</code> <em>with two Tensors that are of the same height and width as the input Tensor …</em> <code class="language-plaintext highlighter-rouge">output['out']</code> <em>contains the semantic masks, and</em> <code class="language-plaintext highlighter-rouge">output['aux']</code> <em>contains the auxiliary loss values per-pixel.”</em></p>

<pre><code class="language-Python"># output['out'] is what we really want
# output is a tensor with shape [batch_size, num_classes, height, width]
output = model(X_train.to(device))["out"]
</code></pre>

<p>In order to calculate the loss we have to massage the tensors a bit. I chose <code class="language-plaintext highlighter-rouge">nn.CrossEntropyLoss()</code> as the loss function and its documentation allows the input to have shape <code class="language-plaintext highlighter-rouge">[batch_size, num_classes, height, width]</code> but its target must have shape <code class="language-plaintext highlighter-rouge">[batch_size, height, width]</code> so with help from the <code class="language-plaintext highlighter-rouge">einops</code> package:</p>

<pre><code class="language-Python">from einops import rearrange

# rearrange target
target = rearrange(target, "bat cla height width -&gt; (bat cla) height width")

# calculate loss
loss = loss_fn(output, target)
</code></pre>

<p>Now we notice that for each batch there is a dimension in the first index of the tensor for <code class="language-plaintext highlighter-rouge">logit(false)</code> and <code class="language-plaintext highlighter-rouge">logit(true)</code> which is redundant. We can just keep <code class="language-plaintext highlighter-rouge">logit(true)</code> for each batch, take that softmax, binarize the predictions, and finally calculate accuracy.</p>

<pre><code class="language-Python"># modify output to be in format [logit(true)] for each sample
output = output[:, 1, :, :]

# take softmax
output = nn.functional.softmax(output, dim=1)

# binarize predictions &amp; calculate accuracy
y_pred = (output &gt; 0.5).type(torch.int32)
accuracy_fn = torchmetrics.Accuracy(task="binary", num_classes=NUM_CLASSES)
accuracy = accuracy_fn(y_pred)
</code></pre>

<h4 id="3-wrapping-up">3. Wrapping Up</h4>

<p>With the loss and accuracy for a batch we can go ahead and train our model. The only other trouble I had with with my custom dataset was that I didn’t realize <code class="language-plaintext highlighter-rouge">torchvision.transforms.ToTensor()</code> automatically divides a tensor by 256 so make sure your data is correctly scaled!</p>

<p>For experiment tracking I used <a href="https://wandb.ai/site">wandb</a> which was super simple to set up and let me easily visualize how tweaking some hyperparameters like batch size affected this model’s training. You can find how I created the dataset class, training loops, and experiment tracking for segmentation transfer learning in my <a href="https://github.com/akshaytrikha/transfer-learning/blob/main/segmentation/scripts/">GitHub</a> repository.</p>

<h3 id="classification-example">Classification Example</h3>

<p>Transfer learning for a classification task is virtually the same as segmentation and slightly easier. We start again by loading the pre-trained weights into the model and replacing the classifier layer so that it has the right input and output dimensions for our target problem.</p>

<pre><code class="language-Python">import torchvision

# there are multiple other model sizes
weights = torchvision.models.EfficientNet_B0_Weights.DEFAULT
model = torchvision.models.efficientnet_b0(weights=weights).to(device)

# if you wanted to freeze base layers
for param in model.features.parameters():
    param.requires_grad = False

# modify classifier layer for number of classes
# added dropout for more robustness
model.classifier = nn.Sequential(
    torch.nn.Dropout(p=0.2, inplace=True),
    nn.Linear(in_features=CLASSIFIER_IN_FEATURES, out_features=NUM_CLASSES),
).to(device)
</code></pre>

<p>The only tricky thing here is calculating <code class="language-plaintext highlighter-rouge">CLASSIFIER_IN_FEATURES</code>, which was found by printing out the model’s layers using <code class="language-plaintext highlighter-rouge">torchinfo.summary()</code>. The training step is more straightforward than the segmentation example:</p>

<pre><code class="language-Python"># forward pass
# outputs are in the format [logit(true)] for each sample
# logit = log(unnormalized probability)
outputs = model(X_train.to(device))

# calculate loss &amp; accuracy
loss = loss_fn(outputs, y_train)
accuracy = accuracy_fn(outputs, y_train)
</code></pre>

<p>There you have it, now you can use transfer learning for both segmentation and classification tasks.</p>

<h4 id="references">References:</h4>

<ul>
  <li><a href="https://cs231n.github.io/transfer-learning">https://cs231n.github.io/transfer-learning</a></li>
  <li><a href="https://arxiv.org/pdf/1411.1792.pdf">How transferable are features in deep neural networks?</a></li>
  <li><a href="https://www.learnpytorch.io/06_pytorch_transfer_learning/">https://www.learnpytorch.io/06_pytorch_transfer_learning/</a></li>
</ul>]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[Recall when beginning to train a neural network its weights might be initialized randomly. What if you could start training with a leg up because the network already has some useful information inside of it? Transfer learning is that leg up where you can repurpose models trained on similar tasks and use them for your specific task instead of training from scratch.]]></summary></entry><entry><title type="html">Trump or Computer Dump?</title><link href="http://localhost:4000/deep-learning/2023/04/23/trump-or-computer-dump.html" rel="alternate" type="text/html" title="Trump or Computer Dump?" /><published>2023-04-23T14:53:17-07:00</published><updated>2023-04-23T14:53:17-07:00</updated><id>http://localhost:4000/deep-learning/2023/04/23/trump-or-computer-dump</id><content type="html" xml:base="http://localhost:4000/deep-learning/2023/04/23/trump-or-computer-dump.html"><![CDATA[<script type="module" src="https://gradio.s3-us-west-2.amazonaws.com/4.39.0/gradio.js"></script>

<gradio-app src="https://akshaytrikha-gpt2-trump.hf.space"></gradio-app>

<p>In early 2019 OpenAI published some <a href="https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf">research</a> showing that large language models, when trained on colossal amounts of text, begin to behave unpredictably intelligently on tasks they weren’t originally trained on. Humorously, part of the original dataset for the model was scraped from Reddit - which isn’t always known to be the home of constructive conversation and accurate information so it’s even more surprising how good their model was!</p>

<p>In 2020, while taking an NLP, course I thought it would be fun to finetune GPT-2 on a corpus of then President Trump’s tweets seeing as he has such a distinct style and voice. I obtained his tweets from the super convenient <a href="https://www.thetrumparchive.com/">Trump Twitter Archive</a> which contained ~56,500 of his tweets from 2009 until he was banned from the platform on January 8th, 2021.</p>

<p>The original project took me around 3 weeks if I remember correctly and this weekend as I was dog sitting I remembered that project and got excited about trying to recreate it with the latest tools available, namely HuggingFace. It was awesome to have a benchmark to compare against to measure and truly appreciate the efficiency and ergonomics of HuggingFace’s transformers library. I was able to replicate the finetuning through a short <a href="https://github.com/akshaytrikha/GPT-2-Trump/blob/master/huggingface_trump.ipynb">notebook</a> + host it using gradio on a HuggingFace space in just a couple of days.</p>

<h3 id="finetuning-with-huggingface-transformers">Finetuning with HuggingFace Transformers</h3>

<p>First I defined some hyperparams for training:</p>

<pre><code class="language-Python"># define some params for model
batch_size = 8
epochs = 15
learning_rate = 5e-4
epsilon = 1e-8
warmup_steps = 1e2
sample_every = 100  # produce sample output every 100 steps
max_length = 140  # max length used in generate() method of model
</code></pre>

<p>Assuming the twitter data is downloaded and preprocessed, we need to tokenize the tweets (which means assign a unique <code class="language-plaintext highlighter-rouge">int</code> to every word or character) and load them into a dataloader. The <code class="language-plaintext highlighter-rouge">AutoTokenizer</code> is really nice because it uses the right tokenizer for any specific model available on HuggingFace if you give it a model name e.g.<code class="language-plaintext highlighter-rouge">"gpt2-medium"</code>.</p>

<pre><code class="language-Python">from transformers import (
	AutoTokenizer
    TextDataset,
    DataCollatorForLanguageModeling
)

# create tokenized datasets
tokenizer = AutoTokenizer.from_pretrained(
    "gpt2-medium",
    pad_token='&lt;|endoftext|&gt;'
)

# custom load_dataset function because there are no labels
def load_dataset(train_path, dev_path, tokenizer):
    block_size = 128
    # block_size = tokenizer.model_max_length

    train_dataset = TextDataset(
          tokenizer=tokenizer,
          file_path=train_path,
          block_size=block_size)

    dev_dataset = TextDataset(
          tokenizer=tokenizer,
          file_path=dev_path,
          block_size=block_size)

    data_collator = DataCollatorForLanguageModeling(
        tokenizer=tokenizer, mlm=False,
    )
    return train_dataset, dev_dataset, data_collator

train_dataset, dev_dataset, data_collator = load_dataset(
	train_path, dev_path, tokenizer
)
</code></pre>

<p>Now we can instantiate the model, optimizer, and learning rate scheduler. I’d never experimented with dynamically changing the learning rate during training so using <code class="language-plaintext highlighter-rouge">get_linear_schedule_with_warmup()</code> was exciting. The resulting learning rate vs. epochs graph looked like this:</p>

<figure>
    <br />
	<div style="text-align: center">
		<img src="http://localhost:4000/assets/trumpdump/learning-rate.png" alt="linear learning rate schedule" style="width: 90%" />
	</div>
    <br />
</figure>

<p>which shows a delay in reaching the <code class="language-plaintext highlighter-rouge">learning_rate</code> by <code class="language-plaintext highlighter-rouge">num_epoch_steps</code> and then a slow decrease until the nth epoch.</p>

<pre><code class="language-Python">from transformers import (
    AutoModelWithLMHead,
    get_linear_schedule_with_warmup,
)

# AutoModelWithLMHead will pick GPT-2 weights from name
model = AutoModelWithLMHead.from_pretrained(
	model_name,
	cache_dir=Path('cache').resolve()
)

# necessary because of additional bos, eos, pad tokens to embeddings
model.resize_token_embeddings(len(tokenizer))

# create optimizer and learning rate schedule
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate, eps=epsilon)

training_steps = len(train_dataset) * epochs

# adjust learning rate during training
scheduler = get_linear_schedule_with_warmup(
	optimizer,
	num_warmup_steps = warmup_steps,
	num_training_steps = training_steps
)
</code></pre>

<p>Finally we can instantiate a <code class="language-plaintext highlighter-rouge">TrainingArguments</code> object which holds hyperparams and then run training from the <code class="language-plaintext highlighter-rouge">Trainer</code> object. This also prints out a pretty printed loss vs. step table.</p>

<pre><code class="language-Python">from transformers import (
    Trainer,
    TrainingArguments,
)

training_args = TrainingArguments(
    output_dir="./gpt-2-medium-trump",
    num_train_epochs=epochs,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    eval_steps = 400, # n update steps between two evaluations
    save_steps=800, # n steps per model save
    warmup_steps=500, # n warmup steps for learning rate scheduler
)

trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=train_dataset,
    eval_dataset=dev_dataset,
)

# train &amp; save model run after done
trainer.train()
trainer.save_model()
</code></pre>

<h3 id="inference-with-huggingface-transformers">Inference with HuggingFace Transformers</h3>

<p>Inference was even easier than training as all you need to do is set up a <code class="language-plaintext highlighter-rouge">pipeline</code> for the model:</p>

<pre><code class="language-Python">from transformers import pipeline

trump = pipeline(
	"text-generation",
	model="./gpt-2-medium-trump",
	tokenizer=tokenizer,
	config={"max_length":max_length}  # n tokens
)
</code></pre>

<p>Trump at your fingertips</p>

<pre><code class="language-Python">In:  trump("Today I'll be")[0]["generated_text"]

Out: "Today I'll be rallying w/ @FEMA, First Responders, Law Enforcement,
and First Responders of Puerto Rico to help those most affected by the
#IrmaFlood.https://t.co/gsFSghkmdM"
</code></pre>

<h4 id="resources">Resources:</h4>

<ul>
  <li><a href="https://huggingface.co/learn/nlp-course/chapter3/3?fw=pt">HuggingFace Trainer</a></li>
  <li><a href="https://huggingface.co/gpt2">GPT-2 Model Card</a></li>
  <li><a href="https://github.com/akshaytrikha/GPT-2-Trump/blob/master/huggingface_trump.ipynb">GPT-2 Trump notebook</a></li>
</ul>]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Neural Style Transfer Webcam</title><link href="http://localhost:4000/deep-learning/2021/07/16/neural-style-transfer-webcam.html" rel="alternate" type="text/html" title="Neural Style Transfer Webcam" /><published>2021-07-16T05:50:00-07:00</published><updated>2021-07-16T05:50:00-07:00</updated><id>http://localhost:4000/deep-learning/2021/07/16/neural-style-transfer-webcam</id><content type="html" xml:base="http://localhost:4000/deep-learning/2021/07/16/neural-style-transfer-webcam.html"><![CDATA[<h3 id="overview">Overview</h3>

<p>I wanted to learn how to build and deploy an ML system in the real world and thought this would be a fun place to start. You can find my project’s code <a href="https://github.com/akshaytrikha/style-transfer">here</a>.</p>

<figure>
    <br />
    <div style="text-align: center;">
        <img src="http://localhost:4000/assets/style-transfer/style-transfer.gif" alt="style transfer demo gif" style="width: 100%" />
        <figcaption style="text-align: center">
            Try the demo yourself <a href="https://akshaytrikha.github.io/style-transfer/" target="_blank" rel="noopener noreferrer">here</a>
        </figcaption>
    </div>
    <br />
</figure>

<!-- <figure>
    <br>

        <img src="http://localhost:4000/assets/mask-finding/fast_mask_finding.png" alt="ML defect detection"/>
        <figcaption>Fig 1. Mask Finding</figcaption>

    <br>
</figure> -->

<p>Using your webcam as input, this project generates stylized images in 400ms intervals. It uses two pretrained Tensorflow.js neural networks, sourced from Reiichiro Nakano’s <a href="https://github.com/reiinakano/arbitrary-image-stylization-tfjs">arbitrary-image-stylization-tfjs</a> repo.</p>

<ol>
  <li>The first network is used to learn the style of a given image and generate a style representation.</li>
  <li>The second network is then used for style transfer, or using the style representation to generate a stylized output image.</li>
</ol>

<p>The original models were actually regular tf models, but Reiichiro distilled them into smaller networks so they would run faster. For a more detailed breakdown of how the networks work, check out his blog <a href="https://magenta.tensorflow.org/blog/2018/12/20/style-transfer-js/">post</a>.</p>

<h3 id="building-the-react-app">Building the React App</h3>

<p>I used Nicholas Renotte’s <a href="https://github.com/nicknochnack/ReactComputerVisionTemplate">ReactComputerVisonTemplate</a> repo as a template for interfacing with a webcam and rendering output back on screen. The big idea is to use the <code class="language-plaintext highlighter-rouge">react-webcam</code> component to take screenshots, generate their style representations, and then display their stylized images. In pseudo-ish code the entire app is basically:</p>

<pre><code class="language-JavaScript">import Webcam from "react-webcam";

const predict = async () =&gt; {
    // First wait for models to load
    await loadModels();
    // init style image and generate style representation
    await initStyleImage();

    // every 400ms
    setInterval(() =&gt; {
        captureScreenshot();
        generateStylizedImage();
    }, 400);
}
</code></pre>

<h3 id="lessons-learned">Lessons learned</h3>

<ol>
  <li>
    <p>A very fun fact about using TensorFlow.js is that your browser is locally running inference, and all your data is kept on your device.</p>
  </li>
  <li>
    <p>You have to do a lot of things asynchronously e.g. fetching the models, loading the models, running inference. Timing all of this was how I decided to introduce the delay of 400ms.</p>
  </li>
  <li>
    <p>tfjs is slightly different to using tf in python in small ways. You have to use methods like <code class="language-plaintext highlighter-rouge">tf.ready().then(() =&gt; {})</code> that returns a promise when tfjs is ready (if the WebGL backend is ready).</p>
  </li>
  <li>
    <p>I used the html <code class="language-plaintext highlighter-rouge">canvas</code> element to display images and would use <code class="language-plaintext highlighter-rouge">document.getElementById("element-name").src = ...</code> directly to update an element. I standardized the display sizes in px to make it easier to deal with.</p>
  </li>
  <li>
    <p>To make them persistent I stored the model weights in the repo itself so that they’re accessible with e.g. <code class="language-plaintext highlighter-rouge">transferModel = await tf.loadGraphModel(process.env.PUBLIC_URL + '/models/style-prediction/model.json')</code></p>
  </li>
</ol>

<h4 id="resources">Resources:</h4>

<ul>
  <li><a href="https://github.com/reiinakano/arbitrary-image-stylization-tfjs">https://github.com/reiinakano/arbitrary-image-stylization-tfjs</a></li>
  <li><a href="https://magenta.tensorflow.org/blog/2018/12/20/style-transfer-js/">https://magenta.tensorflow.org/blog/2018/12/20/style-transfer-js/</a></li>
  <li><a href="https://styletransfer.art">https://styletransfer.art</a></li>
</ul>]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[Overview]]></summary></entry><entry><title type="html">Barium Titanate Permittivity &amp;amp; Image Processing</title><link href="http://localhost:4000/2021/07/14/bto-image-processing.html" rel="alternate" type="text/html" title="Barium Titanate Permittivity &amp;amp; Image Processing" /><published>2021-07-14T14:53:17-07:00</published><updated>2021-07-14T14:53:17-07:00</updated><id>http://localhost:4000/2021/07/14/bto-image-processing</id><content type="html" xml:base="http://localhost:4000/2021/07/14/bto-image-processing.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">The Bias-Expressivity Trade-off</title><link href="http://localhost:4000/deep-learning/2019/11/09/bias-expressivity-tradeoff.html" rel="alternate" type="text/html" title="The Bias-Expressivity Trade-off" /><published>2019-11-09T13:53:17-08:00</published><updated>2019-11-09T13:53:17-08:00</updated><id>http://localhost:4000/deep-learning/2019/11/09/bias-expressivity-tradeoff</id><content type="html" xml:base="http://localhost:4000/deep-learning/2019/11/09/bias-expressivity-tradeoff.html"><![CDATA[]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">The Futility of Bias-Free Learning and Search</title><link href="http://localhost:4000/deep-learning/2019/07/25/futility-of-bias-free-learning-and-search.html" rel="alternate" type="text/html" title="The Futility of Bias-Free Learning and Search" /><published>2019-07-25T14:53:17-07:00</published><updated>2019-07-25T14:53:17-07:00</updated><id>http://localhost:4000/deep-learning/2019/07/25/futility-of-bias-free-learning-and-search</id><content type="html" xml:base="http://localhost:4000/deep-learning/2019/07/25/futility-of-bias-free-learning-and-search.html"><![CDATA[]]></content><author><name></name></author><category term="deep-learning" /><summary type="html"><![CDATA[]]></summary></entry></feed>